Le diagramme de séquence représente l'exécution de la méthode getRang qui selon nous était le point de départ pour englober les évènements entrants dans la chaîne de responsabilité.  En premier lieu, il y a un appel au "factory" AnalyseurRangFactory pour récupérer une instance utilisable de la classe AbstractAnalyseurRang. Ce factory créé des maillons prédéfinies représentants les handlers à parcourir identifiant des rangs à être présent dans les mains du jeu. Comme le diagramme l'indique avec une note, nous ne détaillons pas tous les maillons formant la chaîne de responsabilités.

Par la suite, pour chaque maillon, la méthode traiterDemande est exécutée. La méthode mainReconnue est ensuite exécutée et c'est le polymorphisme qui entre en jeu pour décider quelle méthode est utilisée. Si un rang est reconnu dans la main, il y a un retour de la valeur booléenne true à la main, si le rang à déterminer du maillon en cours n'est pas reconnu dans la main il y a évaluation de la présence d'un maillon suivant et il se produit la même suite d'opérations évoquées précédemment. Dans le cas où aucun rang n'est reconnu et qu'aucun maillon suivant n'est présent (ne devrait pas arrivé), il y a un retour de la valeur booléenne "faux" à la main.
