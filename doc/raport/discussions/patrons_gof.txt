Une discussion pour expliquer comment l'application des patrons GoF facilite l'extensibilité de votre logiciel.(0.5 à 1 page)

La bibliothèque de jeux de poker que nous avons mis au point à été conçue de manière à ne gérer aucune règle spécifique. Des classes pour remprésenter les différentes carte, les agencer en mains, et comparer deux mains entre elles sont fournie mais ne savent pas comment comparer les main entre elles. C'est à l'utilisateur de la bibliothèque de définir le comportement à adopter en fonction des différentes main.

Celui-ci est en effet invité à définir des classes, héritant de « AbstractAnalyseurRang », représentant les différents rangs qu'il souhaite gérer. Dans ces classe, il est de sa responsabilité de détecter si la main contient bel et bien le rang cherché et, si oui, à en informer la bibliothèque en insérant une instance de la classe « RangPoker » dans le contexte de recherche. Les « RangPoker » seront alors utilisés pour distinguer les rang entre eux.

Advenant le cas où l'utilisateur souhaite une détection plus fine, il peut définir des classes spécialisant « RangPoker » pour pouvoir départager deux rang pourtant égaux. Par exemple, si une main contient une paire de quatre alors que l'autre contient une paire de cinq, la classe « RangPoker » les considérera comme égales puisque les deux mains contiennent une paire. Au contraire, une hypothétique classe « RangPokerPaire » pourrait, en plus comparer la dénomination des deux paire pour les départager.

Il est donc suggéré d'écrire des classe de rang, héritant de « RangPoker » et d'analyseur, héritant de « AbstractAnalyseurRang » ensemble afin de pouvoir départager le plus précisément possible les deux cas.

Ces classes, une fois implémentées, doivent être agencées afin de pouvoir former une chaîne de responsabilité. Actuellement, la classe « Main » utilise la classe « AnalyseurRangFactory », qui implémente la méthode « makeAnalyseurRang », pour obtenir la chaine de responsabilité. Il serait judicieux, dans le futur, de modifier cette situation afin que la classe « AnalyseurRangFactory » soit un type interface et que ce soit l'utilisateur qui en fournisse un exemplaire à la classe « Main ».
