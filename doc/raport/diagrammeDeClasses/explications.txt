Le diagramme de séquence général n'as pas énomément de différences par rapport à celui fournis avec la consigne du travail. La plus grande différence est que nous avons ajouté la classe « AnalyseurRangFactory » qui implémenter le patron « factory » pour créer la chaîne de responsabilités. Nous avons aussi définis différemment les relations entre les classes de la-dite chaine : les classes « Main » et « AbstractAnalyseurRang » utilisent la classe « RangPoker » alors que celle-ci n'utilise personne, la classe « ReqAnalyseMain » aggrège les classes « Main » et « RangPoker », etc. Nous avons aussi représenté les types interfaces « Comparable » et « Iterable » de la bibliothèque et avons représenter explicitement les classes qui les implémentent.

Le second diagramme représentes les différentes héritant de « AbstractAnalyseurRang » et définissant la manière de détecter les différents rang possibles sur une main. Dans les fait, c'est avec ces classes que la « factory » travaille pour créer la chaîne de responsabilités.

Le troisième diagramme ne figurait pas du tout dans les spécifications initiales. Comme il sera expliqué plus loin, nous avons décidés d'implémenter une classe héritant de « RangPoker » pour la plupart des rang possibles afin de pouvoir spécifier des moyens différents de les différencier.
